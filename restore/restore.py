#!/usr/bin/env python3import osimport argparseimport loggingimport shutilimport tarfileimport gzipfrom ftplib import FTP# Handle Configfrom restore_config import CONFIGHOST = CONFIG['host']USER = CONFIG['user']PASSWD = CONFIG['passwd']LOG_PATH = CONFIG['log']PATH = CONFIG['path']# Configure logginglogging.basicConfig(    filename=LOG_PATH,    level=logging.DEBUG,    format='%(asctime)s - %(levelname)s:%(message)s')# Get filename from argumentparser = argparse.ArgumentParser()parser.add_argument(        'restore',        help='Specify the filename of the remote archive to restore the local DB to')args = parser.parse_args()FILE = args.restorelogging.info('Script started')# Try and download the given file to CWDlogging.info('Connecting to host ({0})...'.format(CONFIG['host']))with FTP(host=HOST, user=USER, passwd=PASSWD) as ftp:    logging.info('Connected to host ({0}).'.format(CONFIG['host']))    with open(FILE, 'wb') as archive:        logging.info('Compressed file downloading ({0})...'.format(FILE))        ftp.retrbinary('RETR ' + FILE, archive.write)        logging.info('Compressed file downloaded.')# Un-compress the file to an archivearchive = FILE[:-3] + '.tar'with gzip.open(FILE, 'rb') as f_in, open(archive, 'wb') as f_out:    shutil.copyfileobj(f_in, f_out)    logging.info('Compressed file ({0}) moved to archive ({1})'.format(FILE, archive))# Delete the pre-existing db folder recursivelyfor item in os.scandir(PATH):    if item.is_file():        os.remove(item.path)        logging.info('{0} deleted.'.format(item.path))    if item.is_dir():        shutil.rmtree(item.path)        logging.info('{0} deleted.'.format(item.path))# Un-archive the archive to the DB folderwith tarfile.open(archive, 'r') as tar:    tar.extractall('/')    logging.info('{0} extracted to {1}.'.format(archive, PATH))# Clean upfor file in [archive, FILE]:    os.remove(file)    logging.info('{0} deleted (clean up)'.format(file))logging.info('Script finished')